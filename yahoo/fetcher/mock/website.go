// Code generated by MockGen. DO NOT EDIT.
// Source: website.go

// Package mock_fetcher is a generated GoMock package.
package mock_fetcher

import (
	context "context"
	reflect "reflect"

	goquery "github.com/PuerkitoBio/goquery"
	gomock "github.com/golang/mock/gomock"
)

// MockHTMLFetcher is a mock of HTMLFetcher interface.
type MockHTMLFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockHTMLFetcherMockRecorder
}

// MockHTMLFetcherMockRecorder is the mock recorder for MockHTMLFetcher.
type MockHTMLFetcherMockRecorder struct {
	mock *MockHTMLFetcher
}

// NewMockHTMLFetcher creates a new mock instance.
func NewMockHTMLFetcher(ctrl *gomock.Controller) *MockHTMLFetcher {
	mock := &MockHTMLFetcher{ctrl: ctrl}
	mock.recorder = &MockHTMLFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTMLFetcher) EXPECT() *MockHTMLFetcherMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockHTMLFetcher) Fetch(ctx context.Context, URL string) (*goquery.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, URL)
	ret0, _ := ret[0].(*goquery.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockHTMLFetcherMockRecorder) Fetch(ctx, URL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockHTMLFetcher)(nil).Fetch), ctx, URL)
}
